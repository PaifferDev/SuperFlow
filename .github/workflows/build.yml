name: .NET Build and Publish

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "master" ]
  release:
    types: [published]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - uses: actions/checkout@v4

      # 2. Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3. Restaurar dependencias
      - name: Restore dependencies
        run: dotnet restore

      # 4. Compilar la solución en modo Release
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # 5. Ejecutar pruebas en configuración Release
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'

    steps:
      # 1. Checkout del código
      - uses: actions/checkout@v4

      # 2. Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3. Restaurar dependencias
      - name: Restore dependencies
        run: dotnet restore

      # 4. Compilar la solución en modo Release
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # 5. Empaquetar el proyecto en un archivo .nupkg
      - name: Pack
        run: dotnet pack --configuration Release --no-build --output ./nupkg

      # 6. Publicar el paquete en NuGet
      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --api-key $NUGET_API_KEY \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
